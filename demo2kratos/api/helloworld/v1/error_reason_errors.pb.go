// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNKNOWN.String() && e.Code == 500
}

func ErrorUnknown(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNKNOWN.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGreeterUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GREETER_UNSPECIFIED.String() && e.Code == 500
}

func ErrorGreeterUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GREETER_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsTxError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TX_ERROR.String() && e.Code == 500
}

func ErrorTxError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_TX_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsDbError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DB_ERROR.String() && e.Code == 500
}

func ErrorDbError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DB_ERROR.String(), fmt.Sprintf(format, args...))
}
